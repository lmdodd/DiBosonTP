#!/usr/bin/env python
import ROOT
ROOT.gROOT.SetBatch(True)
ROOT.PyConfig.IgnoreCommandLineOptions = True
import argparse, json, pickle, os, re

# mkdir -p 
def mkdirP(dirname) :
    import errno
    try:
        os.mkdir(dirname)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise e
        pass

def rootFileType(string) :
    file = ROOT.TFile.Open(string)
    if not file :
        raise argparse.ArgumentTypeError(string+' could not be opened!')
    return file

def subDirs(dir) :
    for key in dir.GetListOfKeys() :
        if key.IsFolder() :
            yield key.ReadObj()

def get2DPlot(effDir, isMC=False) :
    canvas = None
    plotsDir = None
    if isMC :
        plotsDir = effDir.Get('cnt_eff_plots')
    else :
        plotsDir = effDir.Get('fit_eff_plots')

    for key in plotsDir.GetListOfKeys() :
        if re.match('probe_.*abseta.*_probe_.*_PLOT.*', key.GetName()) :
            canvas = key.ReadObj()
            break

    if not canvas :
        raise Exception('No canvas found in %s' % effDir.GetName())
    
    plot = canvas.GetPrimitive(canvas.GetName())
    plot.SetName(effDir.GetName())
    ROOT.SetOwnership(canvas, False)
    return plot

def formatValue(hist, etabin, ptbin) :
    value = hist.GetBinContent(etabin, ptbin)
    err = hist.GetBinError(etabin, ptbin)
    return '$%1.4f \\pm %1.4f$' % (value, err)

def makeLatex(data, mc, ratio) :
    output = ''

    neta = data.GetNbinsX()
    output += '''\\begin{table}[htbp]
    \\centering
    \\begin{tabular}{%s}
    \hline
''' % 'c'.join(['|']*(neta+3))

    etaLabels = ['$p_T$', '-']
    for etabin in xrange(1, neta+1) :
        etalo = data.GetXaxis().GetBinLowEdge(etabin)
        etahi = data.GetXaxis().GetBinLowEdge(etabin+1)
        etaLabels.append('$%1.1f < |\\eta| < %1.1f$' % (etalo, etahi))

    output += '        ' + ' & '.join(etaLabels) + '\\\\ \hline\n'

    npt = data.GetNbinsY()
    for ptbin in xrange(1, npt+1) :
        ptlo = data.GetYaxis().GetBinLowEdge(ptbin)
        pthi = data.GetYaxis().GetBinLowEdge(ptbin+1)
        ptLabel = '$%3.0f - %3.0f$' % (ptlo, pthi)

        output += '      \\multirow{3}{*}{%s} \n' % ptLabel

        dataLine, mcLine, ratioLine = [['', name] for name in ['Data', 'MC', 'Ratio']]
        for etabin in xrange(1, neta+1) :
            dataLine.append(formatValue(data, etabin, ptbin))
            mcLine.append(formatValue(mc, etabin, ptbin))
            ratioLine.append(formatValue(ratio, etabin, ptbin))


        output += '        %s \\\\ \n' % ' & '.join(dataLine)
        output += '        %s \\\\ \n' % ' & '.join(mcLine)
        output += '        %s \\\\ \\hline\n' % ' & '.join(ratioLine)

    output += '''   \\end{tabular}
    \\caption{Efficiency table for %s}
\\end{table}
''' % data.GetName().replace('_','\\_')
    return output

def makeJson(data, mc, ratio) :
    output = []

    neta = data.GetNbinsX()
    npt = data.GetNbinsY()
    for ptbin in xrange(1, npt+1) :
        ptlo = data.GetYaxis().GetBinLowEdge(ptbin)
        pthi = data.GetYaxis().GetBinLowEdge(ptbin+1)

        for etabin in xrange(1, neta+1) :
            etalo = data.GetXaxis().GetBinLowEdge(etabin)
            etahi = data.GetXaxis().GetBinLowEdge(etabin+1)
            data_value = data.GetBinContent(etabin, ptbin)
            data_err = data.GetBinError(etabin, ptbin)
            mc_value = mc.GetBinContent(etabin, ptbin)
            mc_err = mc.GetBinError(etabin, ptbin)
            ratio_value = ratio.GetBinContent(etabin, ptbin)
            ratio_err = ratio.GetBinError(etabin, ptbin)
            output.append({
                'pt_lo' : ptlo,
                'pt_hi' : pthi,
                'abseta_lo' : etalo,
                'abseta_hi' : etahi,
                'data' : data_value,
                'data_err' : data_err,
                'mc' : mc_value,
                'mc_err' : mc_err,
                'ratio' : ratio_value,
                'ratio_err' : ratio_err
                })
    return output

def main() :
    parser = argparse.ArgumentParser(description='Dumps fit info generated by TagProbeFitTreeAnalyzer into HTML summary')
    parser.add_argument('--mc', help='MC fit tree name', type=rootFileType, required=True)
    parser.add_argument('--data', help='Data fit tree name', type=rootFileType, required=True)
    parser.add_argument('--output', '-o', help='Directory name for output', required=True)
    parser.add_argument('--input', '-i', help='Directory name in root files to load', default='muonEffs')
    parser.add_argument('--count', '-c', help='Use count efficiency for MC', action='store_true')
    args = parser.parse_args()

    latexOutput = open(os.path.join(args.output, 'tables.tex.txt'), 'w')

    mcPlots = [get2DPlot(effDir, args.count) for effDir in subDirs(args.mc.Get(args.input))]
    dataPlots = [get2DPlot(effDir) for effDir in subDirs(args.data.Get(args.input))]

    def makeFromDivide(num, denom) :
        new = ROOT.TH2F(num)
        new.Divide(denom)
        return new

    ratioPlots = ( (p1, p2, makeFromDivide(p1, p2)) for p1 in dataPlots for p2 in mcPlots if p1.GetName() == p2.GetName().replace('_mcTrue',''))

    table_json = {}
    for (data,mc,ratio) in ratioPlots :
        latexOutput.write(makeLatex(data, mc, ratio))
        table_json[data.GetName()] = makeJson(data, mc, ratio)
        canvas = ROOT.TCanvas(data.GetName()+"_canvas", "")
        canvas.SetLogx(True)

        dataproj = data.ProjectionY("Data", 0, -1, "e")
        dataproj.Scale(1./data.GetXaxis().GetNbins())
        dataproj.SetLineColor(ROOT.kRed)
        dataproj.SetTitle('Data')

        mcproj = mc.ProjectionY("MC", 0, -1, "e")
        mcproj.Scale(1./data.GetXaxis().GetNbins())
        mcproj.SetLineColor(ROOT.kGreen)
        mcproj.SetTitle('MC')

        ratioproj = ratio.ProjectionY("Ratio", 0, -1, "e")
        ratioproj.Scale(1./data.GetXaxis().GetNbins())
        ratioproj.SetLineColor(ROOT.kBlue)
        ratioproj.SetTitle('Ratio')

        stack = ROOT.THStack("stack", "stack;p_{T};Efficiency")
        stack.Add(dataproj, 'ep')
        stack.Add(mcproj, 'ep')
        stack.Add(ratioproj, 'ep')
        stack.SetMinimum(0)
        stack.SetMaximum(1.05)
        stack.Draw('nostack')
        leg = canvas.BuildLegend(.5,.2,.9,.4)
        leg.SetHeader(data.GetName())
        canvas.Update()
        canvas.Print(os.path.join(args.output, data.GetName()+'.png'))

    with open(os.path.join(args.output, 'table.json'), 'w') as out :
        json.dump(table_json, out, indent=4)

if __name__ == '__main__' :
    main()
